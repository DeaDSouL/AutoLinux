#!/bin/env bash

ALSCRIPTDIR=$(dirname "$0")
. "${ALSCRIPTDIR}/al.config"

function _getScriptContents() {
scriptContents="#!/bin/env bash

docker ps -a | grep \"${AL_DOCKER_EMBY_REPO_VER}.*${AL_DOCKER_EMBY_NAME}$\" >/dev/null
# ----------------------------------------------------------------
if [[ \$? == 0 ]]; then
    echo \"[ERROR]: container:${AL_DOCKER_EMBY_NAME} is already installed!\"
    exit 1
fi
# ----------------------------------------------------------------
docker pull ${AL_DOCKER_EMBY_REPO_VER}
# ----------------------------------------------------------------
docker run -d \\
    --network ${AL_DOCKER_EMBY_NETWORK} \\
    --ip ${AL_DOCKER_EMBY_IP} \\
    --hostname \"${AL_DOCKER_EMBY_HOSTNAME}\" \\
    --mac-address \"${AL_DOCKER_EMBY_MAC}\" \\
    ${1}\\
    --device /dev/dri/renderD128 \\
    --publish ${AL_DOCKER_EMBY_IP}:8096:8096 \\
    --publish ${AL_DOCKER_EMBY_IP}:8920:8920 \\
    --env UID=${AL_DOCKER_EMBY_UID} \\
    --env GID=${AL_DOCKER_EMBY_GID} \\
    --env GIDLIST=${AL_DOCKER_EMBY_GIDLIST} \\
    --restart ${AL_DOCKER_EMBY_RESTART} \\
    --name ${AL_DOCKER_EMBY_NAME} \\
    ${AL_DOCKER_EMBY_OPTIONS[@]} ${AL_DOCKER_EMBY_REPO_VER} sh
"
    echo "${scriptContents}"
}

function init_install() {
    docker ps -a | grep "${AL_DOCKER_EMBY_REPO_VER}.*${AL_DOCKER_EMBY_NAME}$" >/dev/null
    if [[ $? == 0 ]]; then
        echo "[ERROR]: container:${AL_DOCKER_EMBY_NAME} is already installed!"
        exit 1
    fi
    # ----------------------------------------------------------------
    eVolumes=''
    for eVol in "${AL_DOCKER_EMBY_VOLUMES[@]}"; do
        [[ ! -z "${eVol}" ]] && eVolumes="${eVolumes}--volume ${eVol} "
    done
    # ----------------------------------------------------------------
    docker pull ${AL_DOCKER_EMBY_REPO_VER}
    # ----------------------------------------------------------------
    # Original: https://hub.docker.com/r/emby/embyserver/
    #
    #docker run -d \
    #    --volume /path/to/programdata:/config \ # This is mandatory
    #    --volume /path/to/share1:/mnt/share1 \ # To mount a first share
    #    --volume /path/to/share2:/mnt/share2 \ # To mount a second share
    #    --device /dev/dri/renderD128 \ # To mount a render node for VAAPI
    #    --publish 8096:8096 \ # To expose the HTTP port
    #    --publish 8920:8920 \ # To expose the HTTPS port
    #    --env UID=1000 \ # The UID to run emby as (default: 2)
    #    --env GID=100 \ # The GID to run emby as (default 2)
    #    --env GIDLIST=100 \ # A comma-separated list of additional GIDs to run emby as (default: 2)
    #    emby/embyserver:latest
    docker run -d \
        --network ${AL_DOCKER_EMBY_NETWORK} \
        --ip ${AL_DOCKER_EMBY_IP} \
        --hostname "${AL_DOCKER_EMBY_HOSTNAME}" \
        --mac-address "${AL_DOCKER_EMBY_MAC}" \
        ${eVolumes}\
        --device /dev/dri/renderD128 \
        --publish ${AL_DOCKER_EMBY_IP}:8096:8096 \
        --publish ${AL_DOCKER_EMBY_IP}:8920:8920 \
        --env UID=${AL_DOCKER_EMBY_UID} \
        --env GID=${AL_DOCKER_EMBY_GID} \
        --env GIDLIST=${AL_DOCKER_EMBY_GIDLIST} \
        --restart ${AL_DOCKER_EMBY_RESTART} \
        --name ${AL_DOCKER_EMBY_NAME} \
        ${AL_DOCKER_EMBY_OPTIONS[@]} ${AL_DOCKER_EMBY_REPO_VER} sh
    # ----------------------------------------------------------------
    docker ps -a
    # ----------------------------------------------------------------
    scriptFile="${AL_PATH_BIN}/run.${AL_DOCKER_EMBY_NAME}"
    _getScriptContents "${eVolumes}" > "${scriptFile}"
    chmod u+x "${scriptFile}"
    ln -s "${scriptFile}" /usr/local/sbin/
    echo -e "Generated a 'docker run' file in:\n\t${scriptFile}"
}

function init_remove() {
    docker stop ${AL_DOCKER_EMBY_NAME}
    docker rm ${AL_DOCKER_EMBY_NAME}
}

function init_purge() {
    init_remove
    # ----------------------------------------------------------------
    docker rmi ${AL_DOCKER_EMBY_REPO_VER}
    # @TODO: Should we really delete paths of: emby, config, backup, bin ??
    #   I don't think it's a good idea!
}

function init_showUsage() {
    echo -e "\nUSAGE: $0 help|install|remove|purge\n
    help\tShows this menu.
    install\tInstalls docker's emby (image & container).
    remove\tRemoves docker's emby (container).
    purge\tRemove docker's emby (image, container & files).\n"
}

function init_main() {
    case "$1" in
        install)    init_install "$2"               ;;
        remove)     init_remove "$2"                ;;
        purge)      init_purge "$2"                 ;;
        help)       init_showUsage                  ;;
        *)          echo "[ERROR]: Try: $0 help"    ;;
    esac
}

chmod u+x "$0"
init_main "$1" "$2"
