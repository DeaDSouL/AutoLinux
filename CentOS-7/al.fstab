#!/bin/env bash

ALSCRIPTDIR=$(dirname "$0")
. "${ALSCRIPTDIR}/al.config"

PATTERNSTART='# AL_FSTAB : START'
PATTERNEND='# AL_FSTAB : END'
FSTABFILE='/etc/fstab'
TMPFSTABPURGE='/tmp/tmp.al_fstab_purge'

function init_install() {
    # @TODO: make sure we haven't install al.fstab before we proceed
    $(grep "${PATTERNSTART}" "${FSTABFILE}" &>/dev/null)
    if [[ $? == 0 ]]; then
        echo '[ERROR]: al.fstab is already installed!'
        echo 'If you modified the its config and want'
        echo 'to re-install them. First you would need'
        echo 'to use the "remove" option, then try again'
        exit 1
    fi
    # ----------------------------------------------------------------
    echo 'Reading config & building mounts..'
    declare -a enteries
    declare -a fsmpoints
    for fsrow in ${!AL_FSTAB_*}; do
        fsmpoint=${fsrow}[1]
        fsmpoint=${!fsmpoint}
        fsmpoints+=("${fsmpoint}")
        fsrow=${fsrow}[@]
        [[ ! -z "${fsmpoint}" && ! -e "${fsmpoint}" ]] && mkdir -p "${fsmpoint}"
        entery=''
        for fscell in ${!fsrow}; do
            if [[ "${fscell}" == '' ]]; then
                unset entery
                break
            fi
            entery="${entery}${fscell}         "
        done
        if [[ ! -z "${entery}" ]]; then
            entery="${entery::-9}"
            enteries+=("${entery}")
        fi
    done
    # ----------------------------------------------------------------
    if [[ "${#enteries[@]}" > 0 ]]; then
        echo 'Adding the built mounts..'
        unset entery
        # @TODO: make sure the file does NOT have the enteries we want to add
        cp -pv "${FSTABFILE}" "${FSTABFILE}.bkp-${AL_DATETIME}"
        echo -e "\n${PATTERNSTART}" >> "${FSTABFILE}"
        echo -e "# Generated by: AutoLinux::al.fstab" >> "${FSTABFILE}"
        echo -e "# URL: https://gitlab.com/DeaDSouL/AutoLinux" >> "${FSTABFILE}"
        echo -e "# !!WARNING!! DO NOT ADD ANYTHING BETWEEN THE LINES" >> "${FSTABFILE}"
        echo -e "# '${PATTERNSTART}' AND '${PATTERNEND}' BECAUSE IT MAY GET REMOVED.\n" >> "${FSTABFILE}"
        for entery in "${enteries[@]}"; do
            echo "$entery" >> "${FSTABFILE}"
        done
        echo -e "\n${PATTERNEND}" >> "${FSTABFILE}"
        # ----------------------------------------------------------------
        echo 'Mounting the added mounts..'
        unset fsmpoint
        for fsmpoint in "${fsmpoints[@]}"; do
            mountpoint -q "${fsmpoint}" &>/dev/null
            if [[ $? != 0 ]]; then
                echo "Mounting ${fsmpoint}"
                mount "${fsmpoint}"
            fi
        done
    else
        echo '[ERROR]: Did not find any new mounts to add'
        exit 1
    fi
    # ----------------------------------------------------------------
    exit 0
}

function init_remove() {
    sed "/^${PATTERNSTART}/,/^${PATTERNEND}/d" "${FSTABFILE}" > "${FSTABFILE}.tmp"
    echo "Backing-up: ${FSTABFILE}"
    mv -v "${FSTABFILE}" "${FSTABFILE}.bkp-${AL_DATETIME}"
    echo "Removing the AL_FSTAB mounts..."
    mv "${FSTABFILE}.tmp" "${FSTABFILE}"
    # ----------------------------------------------------------------
}

function init_purge() {
    sponge() ( tmp=$(mktemp) && cat > "$tmp" && cat -- "$tmp" > "$1" && rm -- "$tmp"; )
    # ----------------------------------------------------------------
    sedPattern="/^${PATTERNSTART}/,/^${PATTERNEND}/p"
    sed -n "${sedPattern}" "${FSTABFILE}" |egrep -v '^#|^$' |awk '{print $2}' > "${TMPFSTABPURGE}"
    # ----------------------------------------------------------------
    tac "${TMPFSTABPURGE}" | sponge "${TMPFSTABPURGE}"
    # ----------------------------------------------------------------
    while IFS='' read -r fsmpoint || [[ -n "${fsmpoint}" ]]; do
        mountpoint -q "${fsmpoint}" &>/dev/null
        if [[ $? == 0 ]]; then
            echo "Un-mounting: ${fsmpoint}"
            umount "${fsmpoint}"
        fi
    done < "${TMPFSTABPURGE}"
    # ----------------------------------------------------------------
    [[ -e "${TMPFSTABPURGE}" ]] && rm -f "${TMPFSTABPURGE}"
    # ----------------------------------------------------------------
    init_remove "$1"
}

function init_showUsage() {
    echo -e "\nUSAGE: $0 help|install|remove|purge\n
    help\tShows this menu.
    install\tInstalls the al.fstab mounts.
    remove\tRemoves the al.fstab mounts.
    purge\tUn-mount the al.fstab mounts, then call remove.\n"
}

function init_main() {
    case "$1" in
        install)    init_install "$2"               ;;
        remove)     init_remove "$2"                ;;
        purge)      init_purge "$2"                 ;;
        help)       init_showUsage                  ;;
        *)          echo "[ERROR]: Try: $0 help"    ;;
    esac
}

chmod u+x "$0"
init_main "$1" "$2"
